

// multi product add
var addcartmultiproduct = async (e) => {
    e.preventDefault();
    bundleaddtocart[0].classList.add('loading');

    subvariantarray = [];
    pro_titles = [];
    for (px = 0; px < productarray.length; px++) {
        console.log('xval ' + (px+1));
        pro_title = document.querySelector(".bundle-box-product-page-right-sec [name='properties[Bundle" + (px+1) + "]']").value
        pro_titles.push(pro_title + " | ");
        console.log(pro_titles);
    }

    randomnumber = Math.floor((Math.random() * 999999) + 10000);
    pid = document.querySelector(".bundle-box-product-page-right-sec [name='id']").value;
    pqty = document.querySelector(".bundle-box-product-page-right-sec [name='quantity']").value;

    subvariantarray.push({'id': pid, "quantity": pqty,
    properties: {
        "randomnumber": randomnumber,
        "product": pro_titles,
        "type": "main"
        }
    })
    for (subp = 0; subp < productarray.length; subp++){
        subvariantarray.push({'id': productarray[subp].variant_id, "quantity": 1,
        properties: {
            "randomnumber": randomnumber,
            "type": "sub_product"
        }
    })
    }
    


       /* subvariantarray = [];
        subvariantarrayfinal = [];
        filteredproduct = null;
        var product_data = null;

        for (subp = 0; subp < productarray.length; subp++){
              subvariantarray.push(productarray[subp].variant_id);    
        }

        for (subps = 0; subp < productarray.length; subps++){
            function sameId(value) {
                return value = [...productarray[subps].variant_id];
              }         
        }
        filteredproduct = subvariantarray.filter(sameId);

        for (fsubp = 0; subp < filteredproduct.length; fsubp++){
            subvariantarrayfinal.push({'id':filteredproduct[fsubp],'quantity':filteredproduct.length})
          }
          */
      



        // map over variant array to create an array of objects with quantity and id
        // product_data = subvariantarray.map(variantId => {
        //   return {quantity: 1, id: variantId}
        // })
      
        // add the items to the data object we need to pass to the fetch call 
        var data = {
          items: subvariantarray
        }
            
        console.log('data',data,subvariantarray);
        // return false;
        await fetch('/cart/add.js', {
          body: JSON.stringify(data),
          credentials: 'same-origin',
          headers: {
            'Content-Type': 'application/json',
            'X-Requested-With':'xmlhttprequest'
          },
          method: 'POST'
        }).then((response) => {
          return response.json();
        }).then (async (dataresponse) => {
          console.log('products', dataresponse);
          cart =  await getCart();
          cartpage = await getCartpage();
          console.log('cart data ',cart);
          console.log('cart page ',cartpage);
        }).catch((err) => {
          console.error(err)
        });

    productarray.splice(0, productarray.length);
    updatebundleproduct();
    addproducttobundleempty();
    removeproduct();
    bundleaddtocart[0].classList.remove('loading');

    async function getCart() {
      const result = await fetch("/cart.js");
  
      if (result.status === 200) {
          return result.json();
      }
  
      throw new Error(`Failed to get request, Shopify returned ${result.status} ${result.statusText}`);
  }

  async function getCartpage() {
    const result = await fetch("/cart?sections=template-cart,header");

    if (result.status === 200) {
        return result.json();
    }

    throw new Error(`Failed to get request, Shopify returned ${result.status} ${result.statusText}`);
}

  

}

